// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  bronze_mensal
  silver_mensal
  gold_mensal
  bronze_anual
  silver_anual
  gold_anual
}

enum PandaVideoStatus {
  CONVERTED
  CONVERTING
  FAILED
}

model User {
  id               String            @id @default(uuid())
  name             String
  cpf              String            @unique
  email            String            @unique
  phone            String            @unique
  birth_date       DateTime
  password         String
  cep              String?
  street           String?
  district         String?
  city             String?
  uf               String?
  residence_number String?
  is_admin         Boolean           @default(false)
  trainings        Training[]
  certificates     Certificate[]
  watched_classes  WatchedClasses[]
  training_metrics TrainingMetrics[]
  logs             Log[]
  recovery_codes   RecoveryCode[]
  quiz_attempts    QuizAttempt[]
  quiz_results     QuizResult[]
  avatars          Avatar[]
  company_id       String
  company          Company           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  is_authenticated Boolean           @default(false)
  @@index(fields: [company_id])
}

model Training {
  id               String            @id @default(uuid())
  name             String
  description      String
  duration         Int               @default(0)
  cover_url        String?
  users            User[]
  video_classes    VideoClass[]
  certificates     Certificate[]
  training_metrics TrainingMetrics[]
  quizes           Quiz[]
  company_id       String
  company          Company           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  @@index(fields: [company_id])
}

model VideoClass {
  id               String           @id @default(uuid())
  name             String
  description      String
  duration         Int
  video_url        String?
  training_id      String
  training         Training         @relation(fields: [training_id], references: [id], onDelete: Cascade)
  watched_classes  WatchedClasses[]
  reference_number Int              @default(autoincrement())
  status           PandaVideoStatus
  thumbnail_url    String?
  storage_size     Float?
  @@index(fields: [training_id])
}

model Avatar {
  id      String @id @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  url     String
  @@index(fields: [user_id])
}

model Certificate {
  id          String    @id @default(uuid())
  user_id     String
  training_id String?
  url         String
  created_at  DateTime  @default(now())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  training    Training? @relation(fields: [training_id], references: [id], onDelete: SetNull)
  @@index(fields: [user_id, training_id])
}

model FaqQuestion {
  id         String   @id @default(uuid())
  question   String
  answer     String
  company_id String
  company    Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)
  @@index(fields: [company_id])
}

model AppVersion {
  id                   String  @id @default(uuid())
  app_version          String
  available_on_ios     Boolean
  available_on_android Boolean
}

model TrainingMetrics {
  id                               String    @id @default(uuid())
  user_id                          String
  user                             User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  training_id                      String
  training                         Training? @relation(fields: [training_id], references: [id], onDelete: Cascade)
  total_training_classes           Int
  total_watched_classes            Int
  total_watched_classes_percentage Int
  @@index(fields: [user_id, training_id])
}

model WatchedClasses {
  id                 String     @id @default(uuid())
  user_id            String
  videoclass_id      String
  training_id        String
  watchedAt          DateTime   @default(now())
  user               User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  videoclass         VideoClass @relation(fields: [videoclass_id], references: [id], onDelete: Cascade)
  execution_time     Int        @default(0)
  completely_watched Boolean
  @@index(fields: [user_id, training_id])
  @@index(fields: [user_id, videoclass_id])
}

model ContactSupport {
  id                  String   @id @default(uuid())
  contact_number      String
  name                String
  email               String
  hide_contact_number Boolean  @default(false)
  company_id          String
  company             Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)
  @@index(fields: [company_id])
}

model Log {
  id         String   @id @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  company_id String
  company    Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)
}

model RecoveryCode {
  id              String   @id @default(uuid())
  code            String
  user_id         String
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at      DateTime @default(now())
  expiration_date DateTime
  @@index(fields: [user_id])
}

model Quiz {
  id            String        @id @default(uuid())
  training_id   String
  training      Training      @relation(fields: [training_id], references: [id], onDelete: Cascade)
  questions     Question[]
  quiz_attempts QuizAttempt[]
  quiz_results  QuizResult[]
  @@index(fields: [training_id])
}

model Question {
  id             String         @id @default(uuid())
  quiz_id        String
  quiz           Quiz           @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  content        String
  options        Option[]
  quiz_responses QuizResponse[]
  @@index(fields: [quiz_id])
}

model Option {
  id             String         @id @default(uuid())
  question_id    String
  question       Question       @relation(fields: [question_id], references: [id], onDelete: Cascade)
  content        String
  quiz_responses QuizResponse[]
  is_correct     Boolean
  @@index(fields: [question_id])
}

model QuizAttempt {
  id             String         @id @default(uuid())
  quiz_id        String
  quiz           Quiz           @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  user_id        String
  user           User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  startedAt      DateTime       @default(now())
  finishedAt     DateTime?
  quiz_responses QuizResponse[]
  quiz_result    QuizResult?
  @@index(fields: [quiz_id, user_id])
}

model QuizResponse {
  id                 String      @id @default(uuid())
  quiz_attempt_id    String
  quiz_attempt       QuizAttempt @relation(fields: [quiz_attempt_id], references: [id], onDelete: Cascade)
  question_id        String
  question           Question    @relation(fields: [question_id], references: [id], onDelete: Cascade)
  selected_option_id String?
  selected_option    Option?     @relation(fields: [selected_option_id], references: [id], onDelete: SetNull)
  is_correct         Boolean     @default(false)
  @@index(fields: [quiz_attempt_id, question_id])
}

model QuizResult {
  id                                 String      @id @default(uuid())
  quiz_id                            String
  quiz                               Quiz        @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  quiz_attempt_id                    String      @unique()
  quiz_attempt                       QuizAttempt @relation(fields: [quiz_attempt_id], references: [id], onDelete: Cascade)
  user_id                            String
  user                               User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  total_quiz_questions               Int
  total_correct_questions            Int
  total_correct_questions_percentage Int
  @@index(fields: [quiz_id, user_id])
  @@index(fields: [quiz_attempt_id, user_id])
}

model Company {
  id                             String           @id @default(uuid())
  fantasy_name                   String
  cnpj                           String           @unique()
  social_reason                  String           @unique()
  email                          String
  phone                          String?
  cep                            String
  city                           String
  district                       String
  number_of_employees            String
  company_sector                 String
  residence_complement           String
  residence_number               String
  street                         String
  uf                             String
  current_plan                   Plan?
  logo_url                       String?
  users                          User[]
  trainings                      Training[]
  contacts_supports              ContactSupport[]
  faq_questions                  FaqQuestion[]
  logs                           Log[]
  number_of_additional_employees Int              @default(0)
  used_storage                   Float              @default(0)
  created_at                     DateTime         @default(now())
  updated_at                     DateTime         @default(now())
  subscription_id                String?
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  cpf              String            @unique
  email            String            @unique
  phone            String            @unique
  birth_date       DateTime
  password         String
  cep              String?
  street           String?
  district         String?
  city             String?
  uf               String?
  residence_number String?
  is_admin         Boolean           @default(false)
  trainings        Training[]
  certificates     Certificate[]
  watched_classes  WatchedClasses[]
  training_metrics TrainingMetrics[]
  logs             Log[]
}

model Training {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String
  duration         Int
  cover_url        String?
  users            User[]
  video_classes    VideoClass[]
  certificates     Certificate[]
  training_metrics TrainingMetrics[]
}

model VideoClass {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String
  duration        Int
  url             String
  thumbnail_url   String?
  training_id     String
  training        Training         @relation(fields: [training_id], references: [id], onDelete: Cascade)
  watched_classes WatchedClasses[]
}

model Avatar {
  id      String @id @default(uuid())
  user_id String
  url     String
}

model Certificate {
  id          String   @id @default(uuid())
  user_id     String
  training_id String
  url         String
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  training    Training @relation(fields: [training_id], references: [id])
}

model FaqQuestion {
  id       String @id @default(uuid())
  question String
  answer   String
}

model AppVersion {
  id                   String  @id @default(uuid())
  app_version          String
  available_on_ios     Boolean
  available_on_android Boolean
}

model TrainingMetrics {
  id                               String    @id @default(uuid())
  user_id                          String
  user                             User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  training_id                      String
  training                         Training? @relation(fields: [training_id], references: [id], onDelete: Cascade)
  total_training_classes           Int
  total_watched_classes            Int
  total_watched_classes_percentage Int
}

model WatchedClasses {
  user_id       String
  videoclass_id String
  training_id   String
  watchedAt     DateTime   @default(now())
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  videoclass    VideoClass @relation(fields: [videoclass_id], references: [id], onDelete: Cascade)

  @@id([user_id, videoclass_id, training_id])
}

model ContactSupport {
  id             String @id @default(uuid())
  contact_number String
}

model Log {
  id         String   @id @default(uuid())
  user_id    String
  user       User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
}
